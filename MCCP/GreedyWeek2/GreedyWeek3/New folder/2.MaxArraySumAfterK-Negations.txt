import java.util.*;
public class Main
{
    static int largestSumAfterKNegations(int[] nums, int k) {
        //normal approach
        Arrays.sort(nums);
        int n=nums.length;
        int i=0;
        while(k>0)
        {
            if(nums[i]<0)
            {
                nums[i]*=-1;
            }
            else if(nums[i]>0)
            {
                i=0;
                nums[i]=nums[i]*-1;
            }
            Arrays.sort(nums);
            k--;
        }
        int sum=0;
        for( i=0;i<n;i++)
        {
            sum=sum+nums[i];
        }
        return sum;
        
    }
    static int maxSum(int[] a,int n,int k)
    {
        //greedy
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();
        for(int i=0;i<n;i++)
        {
            pq.add(a[i]);
        }
        for(int i=0;i<k;i++)
        {
            int x=pq.remove();
            x=x*-1;
            pq.add(x);
        }
        int sum=0;
        for(int i=0;i<n;i++)
        {
            int x=pq.remove();
            sum=sum+x;
        }
        return sum;
    }
	public static void main(String[] args) {
	    int[] nums = {4,2,3};
	    int k = 1;
	    int[] a = {2,-3,-1,5,-4};
	    int k1 = 2;
		System.out.println(maxSum(nums,nums.length,k));
		System.out.println(maxSum(a,a.length,k1));
	}
}
